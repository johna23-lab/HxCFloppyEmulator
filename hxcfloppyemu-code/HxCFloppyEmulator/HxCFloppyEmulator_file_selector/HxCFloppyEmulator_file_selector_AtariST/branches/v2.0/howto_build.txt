How to build the fast HXC Manager for Atari ST :

This distribution is a full kit with precompiled binaries for linux-i386, linux-amd64 and cygwin. All of these 3 development platforms have been tested and procuced BIT-ACCURATE final file OUT.ST. If your archictecture is not one of these, you'll have to build the tools. The source are included.

I no longer use ASP.TTP (Brainstorm's ASSEMBLE), an assembler for Atari ST.
I no longer use AS68 (the 68000 assembler by Vincent Penne/Ziggy Stardust, improved by the sc68 team).
Instead, I chose to use VASM, that is very good (like even better than ASM.TTP !) _and_ is very compatible with Atari assembler (contrary to as68 that required some minor changes in the source). It also support automatic optimisation (contrary to as68).
I may have used AS (the Gnu assembler), but the syntax is very different, and VASM is indeed needed (and a part of) by VBCC.
I no longer use VBCC, I switched back to GCC. To reduce the size of the produced binary (190 Kib) to something reasonable (45 Kib), I usethe techniques described here : http://bus-error.nokturnal.pl/tiki-read_article.php?articleId=12. Note that the memcpy routine bombs on regular 68000 (odd address error), so I had to use another one. I also bundle a printf replacement. This one is very incomplete, but it is still useable in minimal environment. Note that there is NO float support. To use float, I think there is two options: implements/rip float linker library (libm ?), on use vbcc. So far the manager don't need float.

To be able to use gcc to generate an Atari executable, you'll need the Vincent Rivière's port of the m68k-atari-mint tools.
See the instructions at m68k-atari-mint : see http://vincent.riviere.free.fr/soft/m68k-atari-mint/.
This website describe how to install them under linux and cygwin. I had some problem with using the distributed tools with linux-amd64, because the packages require a version of glibc too recent. This does not occurs with Ubuntu. If you need to get the packages for linux-amd64 under Debian, please contact me or Vincent Rivière.


Prerequisites
-------------
PERL
Bash compatible shell
Gnu make
m68k-atari-mint : see http://vincent.riviere.free.fr/soft/m68k-atari-mint/
Under windows: you need Cygwin with the following packages:
    make
    libmpc1
    libmpfr4   (if gcc hangs it means you don't have it !)
    libcloog0
    perl


Instructions
------------
There are 3 directories:
build-tools/ : precompiled binaries used for generating the files. Also contains source for
               building these tools, in case your architecture is not supplied.
hxcfemng/    : the source for the manager, by Jeff. It builds HXCFEMNG.PRG
loader/      : the source for the loader. It repacks HXCFEMNG.PRG and integrates it within an
               atari boot disk.

Part 1 : Hxcfemng
cd hxcfemng
Edit Makefile, fills ARCH to be "linux-i386, linux-amd64 or cygwin"
make
This will build HXCFEMNG.PRG (needed by he loader part)

Part 2 : Loader
cd loader
Edit Makefile, fills ARCH to be "linux-i386, linux-amd64 or cygwin"
make
This will build OUT.ST

You can also go one level up and just type "make", this will build the 2 parts automatically.

Part 3 : Generate .HFE
You'll have to use the HxCFloppyEmulator.exe : import OUT.ST, export as AUTOBOOT.HFE




*****************************
 How to build the build-tools
*****************************
(this is only required if your platform is not cygwin, linux-i386 or linux-amd64)

Description
-----------

I use two tools:
- nrv2b
This is an brute force variation of the UCL library nrv2b algorithm (http://www.oberhumer.com/opensource/ucl/). The main advantage of nrv2b is the depack algorithm is dead simple and insanely fast. It requires no overhead, and does not use stack. The depacker only take a fistful of bytes. The default pack performance is not very good, but it can be tuned. That's the goal of the supplied nrv2b implementation : it will brute force the file until it finds the optimal compression ratio. It's now on par with zip -9 and upx -9. The main drawback is that is use a *lot* more cpu to compress. But given today's hardware, packing a 200 KB file only takes a few seconds, so it is perfectly usable.

- vasm (part of vbcc)
This is a cross assembler. It is robust, fast, has Devpac-compatibily mode, has automatic opt-in optimisations.

Building
--------
Part 1 : nrv2b
cd  nrv2b/src
g++ -O3 nrv2b.cpp -o nrv2b
mv nrv2b ../nrv2b-$ARCH

Part 2 : vasm
cd vbcc/src
Edit Makefile : Fill ARCH and TARGET.
make
make install (this only move the binaries to ../bin-$ARCH)





